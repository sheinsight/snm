name: Release

# on:
#   release:
#     types: [published]

on:
  push:
    tags:
      - "v*"

jobs:

  Testing:
    name: Testing
    strategy:
      matrix:
        include:
          # Linux targets (GNU)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu    # 64位 Linux (GNU)
          # Linux targets (MUSL)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl   # 64位 Linux (MUSL)

          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc      # 64位 Windows (MSVC)
          - os: windows-latest
            target: x86_64-pc-windows-gnu       # 64位 Windows (MinGW)

          # macOS targets
          - os: macos-14
            target: aarch64-apple-darwin        # Apple Silicon Mac
          - os: macos-13
            target: x86_64-apple-darwin         # Intel Mac

      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          override: true
          target: ${{ matrix.target }}
      - name: Run tests
        run: | 
          cargo install just
          just setup
          just ready
          just ci-e2e
          # cargo test --workspace --exclude e2e -- --nocapture
        env:
          RUST_BACKTRACE: full

  Building:
    needs: Testing
    strategy:
      matrix:
        include:
          # Linux targets (GNU)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu    # 64位 Linux (GNU)
          # Linux targets (MUSL)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl   # 64位 Linux (MUSL)

          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc      # 64位 Windows (MSVC)
          - os: windows-latest
            target: x86_64-pc-windows-gnu       # 64位 Windows (MinGW)

          # macOS targets
          - os: macos-14
            target: aarch64-apple-darwin        # Apple Silicon Mac
          - os: macos-13
            target: x86_64-apple-darwin         # Intel Mac
            
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y openssl pkg-config libssl-dev musl-tools
      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          override: true
          target: ${{ matrix.target }}
      - name: Build Binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release --target ${{ matrix.target }}
      - name: Strip Binary (Linux and macOS only)
        if: matrix.os != 'windows-latest'
        run: |
          for file in snm snm-shim; do
            strip "target/${{ matrix.target }}/release/$file"
          done
      - name: Create Archive
        shell: bash
        run: |
          mkdir archive
          cp LICENSE README.md target/${{ matrix.target }}/release/{snm,snm-shim} archive/
          tar -czf ${{ matrix.target }}.tar.gz -C archive LICENSE README.md snm snm-shim
          ls -l
          ls -l archive
          ls -l target/${{ matrix.target }}/release
      - name: Calculate SHA256 Checksum
        run: |
          echo "Calculating SHA256 for ${{ matrix.target }}.tar.gz..."
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            certutil -hashfile "${{ matrix.target }}.tar.gz" SHA256 > "${{ matrix.target }}.sha256"
          else
            shasum -a 256 ${{ matrix.target }}.tar.gz | tee ${{ matrix.target }}.sha256
          fi
          cat ${{ matrix.target }}.sha256
        shell: bash
      - name: Upload Artifacts tar.gz
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.target }}.tar.gz
      - name: Upload Artifacts sha256
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}.sha256
          path: ${{ matrix.target }}.sha256

  publish:
    name: Publish To Github Release
    runs-on: ubuntu-latest
    needs: Building
    steps:
      - name: Create Draft Release
        id: create_release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/download-artifact@v4
      - name: Display structure of downloaded files
        run: ls -R
      - name: Upload Release Asset
        id: upload-release-asset
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: ${{ github.ref_name }}
          files: |
            **/*.tar.gz
            **/*.sha256
            - name: Update Release
            if: startsWith(github.ref, 'refs/tags/')
            run: | 
              echo "Updating release..."
              gh release edit ${{ github.ref_name }} --draft=false --latest
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 