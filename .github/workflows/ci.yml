name: CI
on:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos-x86_64, macos-arm, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-musl
            archive-name: snm-linux-x86_64.zip
          - build: macos-x86_64
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
            archive-name: snm-macos-x86_64.zip
          - build: macos-arm
            os: macos-latest
            rust: nightly
            target: aarch64-apple-darwin
            archive-name: snm-macos-arm.zip
          - build: windows
            os: windows-latest
            rust: nightly-x86_64-msvc
            target: x86_64-pc-windows-msvc
            archive-name: snm-windows-x86_64.zip
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux' && matrix.build == 'linux'
        run: sudo apt-get update && sudo apt-get install -y musl-tools
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}
      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release --target ${{ matrix.target }}
      - name: Strip binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run:  |
          for file in snm node npm npx pnpm pnpx; do
            strip "target/${{ matrix.target }}/release/$file"
          done
      - name: Build archive (Windows)
        if: matrix.build == 'windows'
        shell: pwsh
        run: |
          mkdir archive
          Copy-Item -Path target/${{ matrix.target }}/release/node.exe -Destination archive/
          Copy-Item -Path target/${{ matrix.target }}/release/npm.exe -Destination archive/
          Copy-Item -Path target/${{ matrix.target }}/release/npx.exe -Destination archive/
          Copy-Item -Path target/${{ matrix.target }}/release/pnpm.exe -Destination archive/
          Copy-Item -Path target/${{ matrix.target }}/release/pnpx.exe -Destination archive/
          Copy-Item -Path target/${{ matrix.target }}/release/snm.exe -Destination archive/
          Compress-Archive -Path archive/* -DestinationPath ${{ matrix.archive-name }}
        
      - name: Build archive (Linux and macOS)
        if: matrix.build != 'windows'
        run: |
          mkdir archive
          cp target/${{ matrix.target }}/release/{node,npm,npx,pnpm,pnpx,snm} archive/
          zip -r ${{ matrix.archive-name }} archive/
        
      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive-name }}
          path: ${{ matrix.archive-name }}
          if-no-files-found: error
          overwrite: true
 
  release: 
    name: Upload to Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v4
      - name: Display structure of downloaded files
        run: ls -R
      - name: Upload Release Asset
        id: upload-release-asset
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: ${{ github.ref_name }}
          # prerelease: true
          files: |
            **/*.zip
    